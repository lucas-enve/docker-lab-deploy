name: Build and Deploy Docker image to EC2

on:
  push:
    branches:
      - main  # Se ejecutará cuando hagas un push a la rama principal

jobs:
  build:
    runs-on: ubuntu-latest  # Ejecutar en un entorno Ubuntu

    steps:
    # 1. Checkout el código del repositorio
    - name: Checkout repository
      uses: actions/checkout@v3

    # 2. Configurar Docker Buildx (opcional, mejora la construcción)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # 3. Configurar login en Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 4. Construir la imagen de Docker
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/my-nginx-app .

    # 5. Etiquetar y empujar la imagen a Docker Hub
    - name: Tag and Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest

    # 6. Desplegar la imagen a EC2
    - name: Deploy to EC2
      run: |
        # Crear un archivo temporal con el nombre correcto para la clave privada
        echo "${{ secrets.EC2_SSH_KEY }}" > key-docker-ec2.pem
        chmod 600 key-docker-ec2.pem

        # Conectar a la instancia EC2 y desplegar la aplicación
        ssh -i "key-docker-ec2.pem" -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << EOF
          # Actualizar el sistema e instalar Docker si no está instalado
          sudo yum update -y
          sudo yum install -y docker
          sudo systemctl start docker
          sudo systemctl enable docker

          # Descargar la imagen desde Docker Hub y ejecutarla
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest
          docker run -d -p 80:80 --name my-nginx-app ${{ secrets.DOCKER_USERNAME }}/my-nginx-app:latest
        EOF

        # Eliminar el archivo temporal de la clave privada
        rm -f key-docker-ec2.pem
